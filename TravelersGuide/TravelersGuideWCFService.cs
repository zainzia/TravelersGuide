//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="TravelersGuideCloudService", ConfigurationName="ITravelersGuide")]
public interface ITravelersGuide
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="TravelersGuideCloudService/ITravelersGuide/TestAddMethod", ReplyAction="TravelersGuideCloudService/ITravelersGuide/TestAddMethodResponse")]
    System.IAsyncResult BeginTestAddMethod(int num1, int num2, System.AsyncCallback callback, object asyncState);
    
    double EndTestAddMethod(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="TravelersGuideCloudService/ITravelersGuide/UploadImage", ReplyAction="TravelersGuideCloudService/ITravelersGuide/UploadImageResponse")]
    System.IAsyncResult BeginUploadImage(byte[] imageByteArray, System.AsyncCallback callback, object asyncState);
    
    void EndUploadImage(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="TravelersGuideCloudService/ITravelersGuide/GetImageText", ReplyAction="TravelersGuideCloudService/ITravelersGuide/GetImageTextResponse")]
    System.IAsyncResult BeginGetImageText(byte[] ImageByteArray, System.AsyncCallback callback, object asyncState);
    
    string[] EndGetImageText(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITravelersGuideChannel : ITravelersGuide, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TestAddMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public TestAddMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public double Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((double)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetImageTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetImageTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TravelersGuideClient : System.ServiceModel.ClientBase<ITravelersGuide>, ITravelersGuide
{
    
    private BeginOperationDelegate onBeginTestAddMethodDelegate;
    
    private EndOperationDelegate onEndTestAddMethodDelegate;
    
    private System.Threading.SendOrPostCallback onTestAddMethodCompletedDelegate;
    
    private BeginOperationDelegate onBeginUploadImageDelegate;
    
    private EndOperationDelegate onEndUploadImageDelegate;
    
    private System.Threading.SendOrPostCallback onUploadImageCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetImageTextDelegate;
    
    private EndOperationDelegate onEndGetImageTextDelegate;
    
    private System.Threading.SendOrPostCallback onGetImageTextCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public TravelersGuideClient()
    {
    }
    
    public TravelersGuideClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TravelersGuideClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TravelersGuideClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TravelersGuideClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<TestAddMethodCompletedEventArgs> TestAddMethodCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadImageCompleted;
    
    public event System.EventHandler<GetImageTextCompletedEventArgs> GetImageTextCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITravelersGuide.BeginTestAddMethod(int num1, int num2, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginTestAddMethod(num1, num2, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    double ITravelersGuide.EndTestAddMethod(System.IAsyncResult result)
    {
        return base.Channel.EndTestAddMethod(result);
    }
    
    private System.IAsyncResult OnBeginTestAddMethod(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int num1 = ((int)(inValues[0]));
        int num2 = ((int)(inValues[1]));
        return ((ITravelersGuide)(this)).BeginTestAddMethod(num1, num2, callback, asyncState);
    }
    
    private object[] OnEndTestAddMethod(System.IAsyncResult result)
    {
        double retVal = ((ITravelersGuide)(this)).EndTestAddMethod(result);
        return new object[] {
                retVal};
    }
    
    private void OnTestAddMethodCompleted(object state)
    {
        if ((this.TestAddMethodCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.TestAddMethodCompleted(this, new TestAddMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void TestAddMethodAsync(int num1, int num2)
    {
        this.TestAddMethodAsync(num1, num2, null);
    }
    
    public void TestAddMethodAsync(int num1, int num2, object userState)
    {
        if ((this.onBeginTestAddMethodDelegate == null))
        {
            this.onBeginTestAddMethodDelegate = new BeginOperationDelegate(this.OnBeginTestAddMethod);
        }
        if ((this.onEndTestAddMethodDelegate == null))
        {
            this.onEndTestAddMethodDelegate = new EndOperationDelegate(this.OnEndTestAddMethod);
        }
        if ((this.onTestAddMethodCompletedDelegate == null))
        {
            this.onTestAddMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestAddMethodCompleted);
        }
        base.InvokeAsync(this.onBeginTestAddMethodDelegate, new object[] {
                    num1,
                    num2}, this.onEndTestAddMethodDelegate, this.onTestAddMethodCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITravelersGuide.BeginUploadImage(byte[] imageByteArray, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginUploadImage(imageByteArray, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ITravelersGuide.EndUploadImage(System.IAsyncResult result)
    {
        base.Channel.EndUploadImage(result);
    }
    
    private System.IAsyncResult OnBeginUploadImage(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        byte[] imageByteArray = ((byte[])(inValues[0]));
        return ((ITravelersGuide)(this)).BeginUploadImage(imageByteArray, callback, asyncState);
    }
    
    private object[] OnEndUploadImage(System.IAsyncResult result)
    {
        ((ITravelersGuide)(this)).EndUploadImage(result);
        return null;
    }
    
    private void OnUploadImageCompleted(object state)
    {
        if ((this.UploadImageCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.UploadImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void UploadImageAsync(byte[] imageByteArray)
    {
        this.UploadImageAsync(imageByteArray, null);
    }
    
    public void UploadImageAsync(byte[] imageByteArray, object userState)
    {
        if ((this.onBeginUploadImageDelegate == null))
        {
            this.onBeginUploadImageDelegate = new BeginOperationDelegate(this.OnBeginUploadImage);
        }
        if ((this.onEndUploadImageDelegate == null))
        {
            this.onEndUploadImageDelegate = new EndOperationDelegate(this.OnEndUploadImage);
        }
        if ((this.onUploadImageCompletedDelegate == null))
        {
            this.onUploadImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadImageCompleted);
        }
        base.InvokeAsync(this.onBeginUploadImageDelegate, new object[] {
                    imageByteArray}, this.onEndUploadImageDelegate, this.onUploadImageCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITravelersGuide.BeginGetImageText(byte[] ImageByteArray, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetImageText(ImageByteArray, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string[] ITravelersGuide.EndGetImageText(System.IAsyncResult result)
    {
        return base.Channel.EndGetImageText(result);
    }
    
    private System.IAsyncResult OnBeginGetImageText(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        byte[] ImageByteArray = ((byte[])(inValues[0]));
        return ((ITravelersGuide)(this)).BeginGetImageText(ImageByteArray, callback, asyncState);
    }
    
    private object[] OnEndGetImageText(System.IAsyncResult result)
    {
        string[] retVal = ((ITravelersGuide)(this)).EndGetImageText(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetImageTextCompleted(object state)
    {
        if ((this.GetImageTextCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetImageTextCompleted(this, new GetImageTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetImageTextAsync(byte[] ImageByteArray)
    {
        this.GetImageTextAsync(ImageByteArray, null);
    }
    
    public void GetImageTextAsync(byte[] ImageByteArray, object userState)
    {
        if ((this.onBeginGetImageTextDelegate == null))
        {
            this.onBeginGetImageTextDelegate = new BeginOperationDelegate(this.OnBeginGetImageText);
        }
        if ((this.onEndGetImageTextDelegate == null))
        {
            this.onEndGetImageTextDelegate = new EndOperationDelegate(this.OnEndGetImageText);
        }
        if ((this.onGetImageTextCompletedDelegate == null))
        {
            this.onGetImageTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImageTextCompleted);
        }
        base.InvokeAsync(this.onBeginGetImageTextDelegate, new object[] {
                    ImageByteArray}, this.onEndGetImageTextDelegate, this.onGetImageTextCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ITravelersGuide CreateChannel()
    {
        return new TravelersGuideClientChannel(this);
    }
    
    private class TravelersGuideClientChannel : ChannelBase<ITravelersGuide>, ITravelersGuide
    {
        
        public TravelersGuideClientChannel(System.ServiceModel.ClientBase<ITravelersGuide> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginTestAddMethod(int num1, int num2, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = num1;
            _args[1] = num2;
            System.IAsyncResult _result = base.BeginInvoke("TestAddMethod", _args, callback, asyncState);
            return _result;
        }
        
        public double EndTestAddMethod(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            double _result = ((double)(base.EndInvoke("TestAddMethod", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginUploadImage(byte[] imageByteArray, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = imageByteArray;
            System.IAsyncResult _result = base.BeginInvoke("UploadImage", _args, callback, asyncState);
            return _result;
        }
        
        public void EndUploadImage(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("UploadImage", _args, result);
        }
        
        public System.IAsyncResult BeginGetImageText(byte[] ImageByteArray, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = ImageByteArray;
            System.IAsyncResult _result = base.BeginInvoke("GetImageText", _args, callback, asyncState);
            return _result;
        }
        
        public string[] EndGetImageText(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string[] _result = ((string[])(base.EndInvoke("GetImageText", _args, result)));
            return _result;
        }
    }
}
